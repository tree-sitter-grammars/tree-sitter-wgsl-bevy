================================================================================
Simple imports
================================================================================

#import bevy_pbr::mesh_types
#import bevy_pbr::mesh_view_bindings

--------------------------------------------------------------------------------

(source_file
  (preproc_import
    (import_path
      (identifier)
      (identifier)))
  (preproc_import
    (import_path
      (identifier)
      (identifier))))

================================================================================
Aliased imports
================================================================================

#import bevy_pbr::mesh_types as foo
#import bevy_pbr as pbr

--------------------------------------------------------------------------------

(source_file
  (preproc_import
    (import_path
      (identifier)
      (identifier))
    (alias
      (identifier)))
  (preproc_import
    (import_path
      (identifier))
    (alias
      (identifier))))

================================================================================
Selective imports
================================================================================

#import foo bar, baz
#import foo2 bar2

--------------------------------------------------------------------------------

(source_file
  (preproc_import
    (import_path
      (identifier))
    (identifier)
    (identifier))
  (preproc_import
    (import_path
      (identifier))
    (identifier)))

================================================================================
Imports in structs
================================================================================

struct FragmentInput {
    @builtin(front_facing) is_front: bool,
    @builtin(position) frag_coord: vec4<f32>,
    #import bevy_pbr::mesh_vertex_output
};
--------------------------------------------------------------------------------

(source_file
  (struct_declaration
    (identifier)
    (struct_member
      (attribute
        (identifier)
        (identifier))
      (variable_identifier_declaration
        (identifier)
        (type_declaration)))
    (struct_member
      (attribute
        (identifier)
        (identifier))
      (variable_identifier_declaration
        (identifier)
        (type_declaration
          (type_declaration))))
    (preproc_import
      (import_path
        (identifier)
        (identifier)))))

================================================================================
Top-level ifdef
================================================================================

#ifdef foo
struct FragmentInput {
    @builtin(front_facing) is_front: bool,
    @builtin(position) frag_coord: vec4<f32>,
    #import bevy_pbr::mesh_vertex_output
};
#else
// what?
#endif
--------------------------------------------------------------------------------

(source_file
  (preproc_ifdef
    (identifier)
    (struct_declaration
      (identifier)
      (struct_member
        (attribute
          (identifier)
          (identifier))
        (variable_identifier_declaration
          (identifier)
          (type_declaration)))
      (struct_member
        (attribute
          (identifier)
          (identifier))
        (variable_identifier_declaration
          (identifier)
          (type_declaration
            (type_declaration))))
      (preproc_import
        (import_path
          (identifier)
          (identifier))))
    (preproc_else)
    (line_comment)))

================================================================================
Function ifdef
================================================================================

@fragment
fn fragment(in: FragmentInput) -> @location(0) vec4<f32> {
    var output_color: vec4<f32> = material.base_color;
#ifdef VERTEX_COLORS
#endif

#ifdef VERTEX_COLORS
    output_color = output_color * in.color;
#endif
}
--------------------------------------------------------------------------------

(source_file
  (function_declaration
    (attribute
      (identifier))
    (identifier)
    (parameter_list
      (parameter
        (variable_identifier_declaration
          (identifier)
          (type_declaration
            (identifier)))))
    (function_return_type_declaration
      (attribute
        (identifier)
        (int_literal))
      (type_declaration
        (type_declaration)))
    (compound_statement
      (variable_statement
        (variable_declaration
          (variable_identifier_declaration
            (identifier)
            (type_declaration
              (type_declaration))))
        (composite_value_decomposition_expression
          (identifier)
          (identifier)))
      (preproc_ifdef
        (identifier))
      (preproc_ifdef
        (identifier)
        (assignment_statement
          (lhs_expression
            (identifier))
          (binary_expression
            (identifier)
            (composite_value_decomposition_expression
              (identifier)
              (identifier))))))))

================================================================================
struct ifdef
================================================================================

struct FragmentInput {
#ifdef FOO
    is_front: bool,
#else
    frag_coord: vec4<f32>,
#endif
};
--------------------------------------------------------------------------------

(source_file
  (struct_declaration
    (identifier)
    (preproc_ifdef
      (identifier)
      (struct_member
        (variable_identifier_declaration
          (identifier)
          (type_declaration)))
      (preproc_else
        (struct_member
          (variable_identifier_declaration
            (identifier)
            (type_declaration
              (type_declaration))))))))

================================================================================
#define_import_path
================================================================================

#define_import_path bevy_pbr::mesh_view_types

--------------------------------------------------------------------------------

(source_file
  (define_import_path
    (import_path
      (identifier)
      (identifier))))
